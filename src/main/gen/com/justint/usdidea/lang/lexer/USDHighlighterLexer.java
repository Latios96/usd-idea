/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.justint.usdidea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.justint.usdidea.lang.psi.USDTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>USDHighlighterLexer.flex</tt>
 */
public class USDHighlighterLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SPECIFIER = 2;
  public static final int METADATA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\2\1\1\22\0\1\2\1\0\1\3\1\16\3\0\1\4\1\47\1\45\1\15\1\5\1\71"+
    "\1\6\1\10\1\14\2\13\1\77\1\100\1\76\1\13\1\75\3\13\1\17\1\0\1\34\1\72\1\35"+
    "\1\0\1\32\1\67\1\12\1\60\1\54\1\11\1\70\2\12\1\51\2\12\1\65\1\12\1\61\1\12"+
    "\1\64\2\12\1\63\1\102\1\56\5\12\1\73\1\33\1\74\1\0\1\12\1\0\1\21\1\27\1\42"+
    "\1\36\1\30\1\37\1\53\1\20\1\52\1\12\1\57\1\22\1\26\1\24\1\40\1\23\1\101\1"+
    "\31\1\43\1\50\1\25\1\41\1\12\1\62\1\55\1\66\1\44\1\0\1\46\7\0\1\2\32\0\1\2"+
    "\77\0\12\7\46\0\12\7\14\0\12\7\20\0\12\7\6\0\12\7\6\0\13\2\35\0\2\2\5\0\1"+
    "\2\57\0\1\2\26\0\12\7\16\0\62\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\4\1\1\3\1\4\2\5\1\3"+
    "\1\1\1\6\1\7\11\5\2\1\6\5\1\10\1\11"+
    "\1\12\1\13\6\5\1\14\1\15\1\16\1\17\2\5"+
    "\2\1\1\7\7\5\1\20\1\7\4\5\1\21\1\0"+
    "\1\22\1\0\1\22\3\0\2\5\1\23\1\24\1\25"+
    "\22\5\1\0\1\26\1\0\1\27\33\5\1\0\1\30"+
    "\1\0\1\30\1\0\1\5\3\0\1\31\1\0\1\5"+
    "\1\0\2\25\1\0\2\5\1\32\17\5\1\33\3\5"+
    "\1\26\1\0\1\5\1\34\1\5\1\35\26\5\1\36"+
    "\6\5\3\0\1\5\3\0\1\3\1\31\1\5\1\24"+
    "\2\25\1\0\1\37\15\5\1\40\2\5\1\41\4\5"+
    "\2\0\11\5\1\42\16\5\1\43\4\5\1\44\1\45"+
    "\1\46\1\47\1\50\4\5\6\0\1\5\1\0\1\25"+
    "\1\0\1\51\1\52\1\53\1\5\1\54\12\5\1\55"+
    "\7\5\2\0\5\5\1\56\1\57\5\5\1\60\12\5"+
    "\1\61\2\5\1\62\2\5\1\63\1\64\1\65\1\5"+
    "\5\0\1\5\1\0\1\25\1\0\1\66\13\5\1\67"+
    "\1\70\5\5\1\26\1\0\1\71\1\5\1\72\2\5"+
    "\1\73\1\74\1\75\1\5\1\76\3\5\1\77\3\5"+
    "\1\100\3\5\1\101\7\5\4\0\1\5\1\0\1\25"+
    "\1\0\2\5\1\102\1\5\1\103\2\5\1\104\1\105"+
    "\1\106\2\5\1\107\5\5\1\110\1\5\2\26\1\111"+
    "\1\112\1\113\1\114\2\5\1\115\1\5\1\116\2\5"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\12\5"+
    "\4\0\1\5\1\0\1\126\1\0\6\5\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\3\5\1\26\2\5\1\135"+
    "\1\5\1\136\1\137\1\140\6\5\1\141\4\5\1\142"+
    "\1\143\1\144\1\0\1\25\1\126\1\145\5\5\1\146"+
    "\1\5\1\147\1\26\5\5\1\150\7\5\1\151\1\152"+
    "\2\0\1\153\1\154\1\5\1\155\1\5\1\156\1\157"+
    "\1\5\1\160\1\161\4\5\1\162\1\163\1\164\1\165"+
    "\1\166\1\167\1\5\1\170\1\0\2\5\1\171\1\172"+
    "\1\173\4\5\1\0\1\5\1\174\4\5\1\0\4\5"+
    "\1\175\1\0\4\5\1\0\4\5\1\126\3\5\1\176"+
    "\2\5\1\177\2\5\1\200\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[604];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\311\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\311\0\311\0\311\0\311\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\u09f2\0\311\0\311\0\311\0\311"+
    "\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\311\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\311\0\u0ea8\0\u0eeb\0\u0192\0\311\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u06ce\0\311\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u0afe\0\311\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u02e1\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\311\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u02e1\0\u27c8\0\u280b\0\u284e\0\u2891"+
    "\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u2742\0\u3028\0\u306b\0\u30ae"+
    "\0\311\0\u1fab\0\u30f1\0\311\0\u3134\0\u3177\0\u31ba\0\u31fd"+
    "\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415"+
    "\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d"+
    "\0\u02e1\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a"+
    "\0\u02e1\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef"+
    "\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u02e1"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u02e1\0\u02e1\0\u02e1\0\u02e1"+
    "\0\u02e1\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5"+
    "\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u02e1"+
    "\0\u02e1\0\u02e1\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c"+
    "\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u02e1\0\u45e1"+
    "\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9"+
    "\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u02e1\0\u498b\0\u49ce"+
    "\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u02e1\0\u4b1d\0\u4b60\0\u4ba3"+
    "\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u02e1"+
    "\0\u4dbb\0\u4dfe\0\u02e1\0\u4e41\0\u4e84\0\u02e1\0\u02e1\0\u02e1"+
    "\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c"+
    "\0\u50df\0\u5122\0\u02e1\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271"+
    "\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u02e1\0\u02e1"+
    "\0\u5446\0\u5489\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8\0\u02e1"+
    "\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u02e1\0\u02e1\0\u02e1\0\u5727"+
    "\0\u02e1\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc"+
    "\0\u02e1\0\u593f\0\u5982\0\u59c5\0\u02e1\0\u5a08\0\u5a4b\0\u5a8e"+
    "\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6"+
    "\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2\0\u5df5\0\u5e38\0\u02e1\0\u5e7b"+
    "\0\u02e1\0\u5ebe\0\u5f01\0\u02e1\0\u02e1\0\u02e1\0\u5f44\0\u5f87"+
    "\0\u02e1\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6\0\u02e1\0\u6119"+
    "\0\u615c\0\u619f\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u61e2\0\u6225"+
    "\0\u02e1\0\u6268\0\u02e1\0\u62ab\0\u62ee\0\u02e1\0\u02e1\0\u02e1"+
    "\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u6331\0\u6374\0\u63b7\0\u63fa"+
    "\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf\0\u6612"+
    "\0\u6655\0\u6698\0\u66db\0\u671e\0\u6761\0\u67a4\0\u67e7\0\u682a"+
    "\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u02e1\0\u02e1\0\u02e1\0\u02e1"+
    "\0\u02e1\0\u02e1\0\u6979\0\u69bc\0\u69ff\0\u6a42\0\u6a85\0\u6ac8"+
    "\0\u02e1\0\u6b0b\0\u02e1\0\u02e1\0\u02e1\0\u6b4e\0\u6b91\0\u6bd4"+
    "\0\u6c17\0\u6c5a\0\u6c9d\0\u02e1\0\u6ce0\0\u6d23\0\u6d66\0\u6da9"+
    "\0\u0b41\0\u0d59\0\u02e1\0\u6dec\0\u6e2f\0\u03ed\0\u02e1\0\u6e72"+
    "\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e\0\u02e1\0\u6fc1\0\u02e1\0\u47b6"+
    "\0\u7004\0\u7047\0\u708a\0\u70cd\0\u7110\0\u02e1\0\u7153\0\u7196"+
    "\0\u71d9\0\u721c\0\u725f\0\u72a2\0\u72e5\0\u02e1\0\u02e1\0\u7328"+
    "\0\u736b\0\u02e1\0\u02e1\0\u73ae\0\u02e1\0\u73f1\0\u02e1\0\u02e1"+
    "\0\u7434\0\u7477\0\u02e1\0\u74ba\0\u74fd\0\u7540\0\u7583\0\u02e1"+
    "\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u75c6\0\u02e1\0\u7609"+
    "\0\u764c\0\u768f\0\u02e1\0\u02e1\0\u02e1\0\u76d2\0\u7715\0\u7758"+
    "\0\u779b\0\u77de\0\u7821\0\u02e1\0\u7864\0\u78a7\0\u78ea\0\u792d"+
    "\0\u7970\0\u79b3\0\u79f6\0\u7a39\0\u7a7c\0\u02e1\0\u7abf\0\u7b02"+
    "\0\u7b45\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51\0\u7c94\0\u7cd7\0\u7d1a"+
    "\0\u7d5d\0\u7da0\0\u7de3\0\u7e26\0\u02e1\0\u7e69\0\u7eac\0\u02e1"+
    "\0\u7eef\0\u7f32\0\u02e1\0\u02e1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[604];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\15"+
    "\1\32\1\33\1\4\1\34\1\4\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\15\1\50\4\15\1\51\1\15\1\52\2\15\1\53"+
    "\3\15\1\54\1\55\1\56\1\57\1\60\4\16\1\61"+
    "\1\62\1\4\2\5\1\63\1\64\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\2\4\1\65\1\66"+
    "\1\67\1\70\1\71\1\26\1\27\1\30\1\31\1\15"+
    "\1\32\1\33\1\4\1\34\1\4\1\72\1\36\1\73"+
    "\1\40\1\74\1\42\1\75\2\4\1\46\1\47\1\15"+
    "\1\50\4\15\1\51\1\15\1\52\2\15\1\53\3\15"+
    "\1\54\1\55\1\56\1\57\1\60\4\16\1\61\1\62"+
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\4\1\76\1\77\1\100"+
    "\1\101\1\102\1\26\1\27\1\30\1\31\1\15\1\32"+
    "\1\33\1\4\1\34\1\4\1\72\1\36\1\73\1\40"+
    "\1\74\1\42\1\4\1\103\2\4\1\47\1\15\1\50"+
    "\4\15\1\51\1\15\1\52\2\15\1\53\3\15\1\54"+
    "\1\55\1\56\1\57\1\60\4\16\1\61\1\62\104\0"+
    "\2\5\100\0\3\104\1\105\77\104\4\106\1\107\76\106"+
    "\7\0\1\12\3\0\1\12\61\0\4\12\11\0\1\12"+
    "\3\0\1\12\36\0\1\110\22\0\4\12\11\0\1\12"+
    "\1\111\1\112\1\0\1\12\14\0\1\112\44\0\4\12"+
    "\13\0\3\15\4\0\12\15\4\0\1\113\5\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\7\0\1\12\1\111"+
    "\1\114\1\15\1\16\4\0\10\15\1\114\1\15\4\0"+
    "\6\15\4\0\21\15\4\0\4\16\2\15\14\0\1\115"+
    "\1\116\65\0\1\20\1\0\101\20\17\0\1\117\74\0"+
    "\3\15\3\0\1\117\1\15\1\120\10\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\3\0\1\117"+
    "\3\15\1\121\6\15\4\0\1\122\4\15\1\123\4\0"+
    "\1\124\20\15\4\0\6\15\11\0\3\15\3\0\1\117"+
    "\12\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\3\0\1\117\1\15\1\125\6\15\1\126\1\127"+
    "\4\0\2\15\1\130\3\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\1\15\1\131\10\15\4\0\2\15"+
    "\1\132\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\4\15\1\133\5\15\4\0\4\15\1\134\1\15"+
    "\4\0\2\15\1\135\16\15\4\0\6\15\11\0\3\15"+
    "\4\0\1\15\1\136\10\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\2\15"+
    "\1\137\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\140\1\15\4\0\2\15\1\141\3\15"+
    "\4\0\21\15\4\0\6\15\32\142\1\143\50\142\1\144"+
    "\1\0\32\144\1\0\1\145\45\144\11\0\3\15\4\0"+
    "\10\15\1\146\1\15\4\0\2\15\1\147\3\15\4\0"+
    "\2\15\1\150\16\15\4\0\6\15\11\0\3\15\4\0"+
    "\1\15\1\151\1\152\6\15\1\153\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\1\15\1\154\1\15\1\155\2\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\1\15\1\156\6\15\1\157"+
    "\1\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\2\15\1\160\2\15\1\161\4\15\4\0"+
    "\2\15\1\162\3\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\3\15\1\163\1\15\1\164\4\15\4\0"+
    "\6\15\4\0\1\165\4\15\1\166\13\15\4\0\6\15"+
    "\11\0\3\15\4\0\10\15\1\167\1\170\4\0\2\15"+
    "\1\171\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\4\15\1\172\5\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\2\15\1\173\16\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\2\15\1\174\3\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\2\15"+
    "\1\175\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\1\15\1\176\10\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\5\15\1\177\4\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\11\15\1\200\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\3\201\1\202\77\201\4\203\1\204\76\203\17\0"+
    "\1\205\74\0\3\15\3\0\1\205\1\15\1\120\10\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\3\0\1\205\3\15\1\121\6\15\4\0\1\122\4\15"+
    "\1\123\4\0\1\124\20\15\4\0\6\15\11\0\3\15"+
    "\3\0\1\205\12\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\3\0\1\205\1\15\1\125\6\15"+
    "\1\126\1\127\4\0\2\15\1\130\3\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\10\15\1\206\1\15"+
    "\4\0\2\15\1\147\3\15\4\0\2\15\1\150\16\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\1\15"+
    "\1\154\4\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\5\15\1\161\4\15\4\0\2\15\1\162\3\15"+
    "\4\0\21\15\4\0\6\15\17\0\1\207\74\0\3\15"+
    "\3\0\1\207\1\15\1\120\10\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\3\0\1\207\3\15"+
    "\1\121\6\15\4\0\1\122\4\15\1\123\4\0\1\124"+
    "\20\15\4\0\6\15\11\0\3\15\3\0\1\207\12\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\3\0\1\207\1\15\1\125\6\15\1\126\1\127\4\0"+
    "\2\15\1\130\3\15\4\0\21\15\4\0\6\15\3\104"+
    "\1\107\77\104\3\0\1\210\123\0\1\211\65\0\1\212"+
    "\3\0\1\212\61\0\4\212\7\0\2\213\105\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\3\15\1\214\15\15"+
    "\4\0\6\15\5\0\2\213\2\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\1\115\1\0"+
    "\101\115\15\116\1\215\65\116\17\0\2\216\1\217\2\216"+
    "\1\220\67\0\3\15\4\0\2\15\1\221\7\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\3\15\1\222\6\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\1\223\5\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\5\15\1\224\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\225\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\5\15\1\226\13\15\4\0\6\15\11\0\3\15"+
    "\4\0\11\15\1\227\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\10\15\1\230\1\15\4\0"+
    "\2\15\1\231\3\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\2\15\1\232"+
    "\16\15\4\0\6\15\11\0\3\15\4\0\6\15\1\233"+
    "\3\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\11\15\1\234\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\2\15\1\235\16\15\4\0\6\15\11\0\3\15"+
    "\4\0\1\236\11\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\4\15\1\237\5\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\3\15\1\240\6\15\4\0\6\15\4\0\1\241\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\2\15"+
    "\1\242\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\2\15\1\243\7\15\4\0\1\15\1\244\1\245"+
    "\3\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\2\15\1\246\3\15\4\0\21\15\4\0"+
    "\6\15\32\142\1\247\50\142\32\0\1\250\61\0\3\15"+
    "\4\0\2\15\1\251\7\15\4\0\1\15\1\252\4\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\5\15"+
    "\1\253\4\15\4\0\4\15\1\254\1\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\4\15"+
    "\1\255\1\256\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\2\15\1\257\7\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\2\15"+
    "\1\260\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\1\15\1\261\10\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\1\15"+
    "\1\262\4\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\263\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\11\15\1\264\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\4\15\1\265\1\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\1\15\1\266\10\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\5\15\1\267\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\2\15\1\270\1\15\1\271\5\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\272\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\7\15\1\273\2\15"+
    "\4\0\1\15\1\274\4\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\11\15\1\275\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\6\15\1\276"+
    "\3\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\12\15\1\277"+
    "\6\15\4\0\6\15\11\0\3\15\4\0\5\15\1\300"+
    "\4\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\7\15\1\301"+
    "\11\15\4\0\6\15\11\0\3\15\4\0\1\302\11\15"+
    "\4\0\6\15\4\0\1\303\20\15\4\0\6\15\11\0"+
    "\3\15\4\0\4\15\1\304\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\4\15\1\305"+
    "\5\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\2\15\1\306"+
    "\16\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\4\15\1\307\1\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\1\15\1\310\10\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\1\15\1\311"+
    "\10\15\4\0\6\15\4\0\21\15\4\0\6\15\3\201"+
    "\1\204\77\201\3\0\1\312\120\0\1\313\2\0\1\314"+
    "\67\0\3\15\4\0\2\15\1\251\7\15\4\0\1\15"+
    "\1\315\4\15\4\0\21\15\4\0\6\15\21\0\1\316"+
    "\2\0\1\317\56\0\3\210\1\320\77\210\37\0\1\321"+
    "\52\0\1\212\1\0\1\112\1\0\1\212\14\0\1\112"+
    "\44\0\4\212\11\0\1\322\3\0\1\322\61\0\4\322"+
    "\13\0\3\15\4\0\10\15\1\323\1\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\14\116\1\324\1\215\65\116"+
    "\17\0\1\325\4\216\76\0\1\325\2\216\1\326\1\216"+
    "\104\0\1\327\66\0\3\15\4\0\12\15\4\0\1\15"+
    "\1\330\4\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\331\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\10\15\1\332\1\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\11\15\1\333\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\2\15\1\334\7\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\6\15\1\335\3\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\3\15\1\336\6\15\4\0"+
    "\1\15\1\337\4\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\3\15\1\340\6\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\4\15\1\341"+
    "\5\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\10\15\1\342\1\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\6\15\1\343"+
    "\3\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\1\15\1\344\4\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\1\15\1\345"+
    "\10\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\346\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\3\15\1\347\6\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\11\15\1\350\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\2\15\1\351\7\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\2\15\1\352\3\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\10\15\1\353\1\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\11\15\1\354\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\1\355"+
    "\20\15\4\0\6\15\32\250\1\356\1\357\47\250\11\0"+
    "\3\15\4\0\10\15\1\360\1\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\1\15\1\361"+
    "\10\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\7\15\1\362\2\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\1\363\20\15\4\0\6\15\11\0\3\15"+
    "\4\0\3\15\1\364\6\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\5\15"+
    "\1\365\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\1\15\1\366\10\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\6\15\1\367\3\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\5\15\1\370\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\11\15\1\371\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\2\15\1\372\2\15\1\373\13\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\1\374\20\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\5\15\1\375\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\376\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\2\15"+
    "\1\377\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\4\15\1\u0100\5\15\4\0\1\15\1\u0101\4\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\4\15\1\u0102\1\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\15\15"+
    "\1\u0103\3\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\1\15\1\u0104\4\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\2\15"+
    "\1\u0105\16\15\4\0\6\15\11\0\3\15\4\0\6\15"+
    "\1\u0106\3\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\10\15"+
    "\1\u0107\10\15\4\0\6\15\11\0\3\15\4\0\10\15"+
    "\1\u0108\1\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\10\15\1\u0109\1\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\10\15"+
    "\1\u010a\1\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\10\15\1\u010b\1\15\4\0\6\15"+
    "\4\0\21\15\4\0\1\u010c\1\u010d\1\u010e\1\u010f\2\15"+
    "\11\0\3\15\4\0\12\15\4\0\1\u0110\5\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\10\15\1\u0111"+
    "\1\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\4\15\1\u0112\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\10\15\1\u0113"+
    "\1\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\u0114\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\4\15\1\u0115\5\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\3\312\1\u0116"+
    "\77\312\22\0\1\u0117\105\0\1\u0118\77\0\1\u0119\105\0"+
    "\1\u011a\60\0\1\u011b\110\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\1\15\1\u011c\17\15\4\0\6\15\17\0"+
    "\1\325\4\216\1\u011d\75\0\1\325\3\216\1\u011e\105\0"+
    "\1\u011f\65\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\21\15\4\0\1\15\1\u0120\1\u0121\1\u0122\2\15\11\0"+
    "\3\15\4\0\4\15\1\u0123\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\1\u0124\20\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\2\15\1\u0125\16\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\2\15"+
    "\1\u0126\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\2\15\1\u0127\16\15"+
    "\4\0\6\15\11\0\3\15\4\0\10\15\1\u0128\1\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\2\15\1\u0129\16\15"+
    "\4\0\6\15\11\0\3\15\4\0\10\15\1\u012a\1\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\1\u012b\20\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\10\15\1\u012c\10\15\4\0\6\15\11\0\3\15\4\0"+
    "\1\15\1\u012d\10\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\2\15\1\u012e"+
    "\3\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\11\15\1\u012f\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\21\15"+
    "\4\0\1\u0130\5\15\11\0\3\15\4\0\10\15\1\u0131"+
    "\1\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\2\15\1\u0132"+
    "\16\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\4\15\1\u0133\1\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\11\15\1\u0134\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\1\u0135"+
    "\5\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\14\15\1\u0136\4\15\4\0"+
    "\6\15\32\250\1\u0137\102\250\1\u0138\1\357\47\250\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\u0139\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\5\15\1\u013a\4\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\2\15\1\u013b\7\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\2\15\1\u013c\16\15\4\0\6\15\11\0\3\15"+
    "\4\0\2\15\1\u013d\7\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\10\15\1\u013e\1\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\1\u013f\20\15\4\0"+
    "\6\15\11\0\3\15\4\0\10\15\1\u0140\1\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\10\15\1\u0141\1\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\1\15\1\u0142\10\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\2\15\1\u0143\16\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\2\15\1\u0144"+
    "\3\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\5\15\1\u0145\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\2\15\1\u0146\3\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\11\15"+
    "\1\u0147\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\10\15\1\u0148\1\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\2\15\1\u0149\16\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\2\15\1\u014a"+
    "\16\15\4\0\6\15\11\0\3\15\4\0\1\15\1\u014b"+
    "\10\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\2\15\1\u014c"+
    "\16\15\4\0\6\15\11\0\3\15\4\0\4\15\1\u014d"+
    "\5\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\10\15\1\u014e\1\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\2\15\1\u014f\3\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\4\15\1\u0150\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\11\15\1\u0151"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\11\15\1\u0152\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\21\15\4\0\1\15\1\u0153\4\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\1\u0154\20\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\1\15"+
    "\1\u0155\17\15\4\0\6\15\11\0\3\15\4\0\1\u0156"+
    "\11\15\4\0\1\u0157\1\u0158\4\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\5\15\1\u0159"+
    "\4\0\21\15\4\0\6\15\3\0\1\u015a\122\0\1\u015b"+
    "\105\0\1\u015c\77\0\1\u015d\105\0\1\u015e\57\0\1\107"+
    "\110\0\3\15\4\0\4\15\1\u015f\5\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\25\0\1\u0160\74\0\1\325"+
    "\1\u0161\3\216\106\0\1\u0162\64\0\3\15\4\0\12\15"+
    "\4\0\1\u0163\5\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\15\1\u0164"+
    "\17\15\4\0\6\15\11\0\3\15\4\0\7\15\1\u0165"+
    "\2\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\1\15\1\u0166\10\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\5\15\1\u0167\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\4\15\1\u0168\5\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\12\15\1\u0169\6\15\4\0\6\15\11\0\3\15"+
    "\4\0\11\15\1\u016a\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\21\15\4\0\3\15\1\u016b\2\15\11\0\3\15\4\0"+
    "\1\u016c\11\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\2\15\1\u016d\7\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\11\15"+
    "\1\u016e\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\21\15\4\0"+
    "\1\15\1\u016f\4\15\11\0\3\15\4\0\11\15\1\u0170"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\12\15\1\u0171\6\15"+
    "\4\0\6\15\11\0\3\15\4\0\1\15\1\u0172\10\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\u0173\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\10\15\1\u0174\1\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\11\15\1\u0175\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\32\250\1\u0176\102\250\1\u0177\50\250\11\0\3\15"+
    "\4\0\10\15\1\u0178\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\2\15\1\u0179\7\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\u017a\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\2\15"+
    "\1\u017b\3\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\1\15\1\u017c\10\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\21\15\4\0\1\15\1\u017d\1\u017e\1\u017f\2\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\21\15"+
    "\4\0\1\15\1\u0180\4\15\11\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\1\u0181\20\15\4\0\6\15\11\0"+
    "\3\15\4\0\4\15\1\u0182\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\4\15\1\u0183"+
    "\5\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\11\15\1\u0184\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\6\15\1\u0185\3\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\21\15\4\0\1\15"+
    "\1\u0186\1\15\1\u0187\2\15\11\0\3\15\4\0\12\15"+
    "\4\0\4\15\1\u0188\1\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\3\15"+
    "\1\u0189\15\15\4\0\6\15\11\0\3\15\4\0\1\15"+
    "\1\u018a\10\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\5\15"+
    "\1\u018b\13\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\12\15\1\u018c\6\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\3\15"+
    "\1\u018d\15\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\1\u018e\20\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\2\15\1\u018f\3\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\2\15\1\u0190\16\15\4\0\6\15\11\0"+
    "\3\15\4\0\3\15\1\u0191\6\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\1\15\1\u0192\17\15\4\0\6\15\11\0"+
    "\3\15\4\0\4\15\1\u0193\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\1\15\1\u0194\4\15\4\0\21\15\4\0\6\15\3\0"+
    "\1\204\117\0\1\u0195\111\0\1\u0196\73\0\1\u0197\111\0"+
    "\1\u0198\64\0\3\15\4\0\12\15\4\0\1\u0199\5\15"+
    "\4\0\21\15\4\0\6\15\26\0\1\u019a\73\0\1\325"+
    "\1\216\1\u019b\2\216\107\0\1\u019c\63\0\3\15\4\0"+
    "\4\15\1\u019d\5\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\5\15\1\u019e\4\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\1\u019f\5\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\5\15\1\u01a0\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\1\u01a1\5\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\13\15\1\u01a2\5\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\1\u01a3\20\15\4\0\6\15\11\0\3\15\4\0"+
    "\1\u01a4\11\15\4\0\1\u01a5\1\u01a6\4\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\2\15\1\u01a7\16\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\21\15\4\0\3\15"+
    "\1\u01a8\2\15\11\0\3\15\4\0\6\15\1\u01a9\3\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\21\15\4\0\1\15"+
    "\1\u01aa\1\u01ab\1\u01ac\2\15\11\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\1\u01ad\20\15\4\0\6\15\11\0"+
    "\3\15\4\0\4\15\1\u01ae\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\11\15\1\u01af"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\2\15\1\u01b0\16\15"+
    "\4\0\6\15\32\0\1\u01b1\50\0\32\250\1\u01b2\50\250"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\1\u01b3"+
    "\20\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\21\15\4\0\1\15\1\u01b4\1\u01b5\1\u01b6"+
    "\2\15\11\0\3\15\4\0\4\15\1\u01b7\5\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\5\15\1\u01b8\13\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\1\u01b9\5\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\1\u01ba\20\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\3\15\1\u01bb"+
    "\15\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\21\15\4\0\3\15\1\u01bc\2\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\4\15\1\u01bd"+
    "\14\15\4\0\6\15\11\0\3\15\4\0\1\u01be\11\15"+
    "\4\0\1\u01bf\1\u01c0\4\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\1\u01c1\11\15\4\0\1\u01c2\1\u01c3"+
    "\4\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\1\u01c4\20\15\4\0\6\15"+
    "\11\0\3\15\4\0\2\15\1\u01c5\7\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\10\15"+
    "\1\u01c6\1\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\13\15"+
    "\1\u01c7\5\15\4\0\6\15\11\0\3\15\4\0\11\15"+
    "\1\u01c8\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\11\15\1\u01c9\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\1\u01ca\20\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\2\15\1\u01cb\3\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\4\15\1\u01cc\5\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\1\u01cd\5\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\2\15\1\u01ce\3\15"+
    "\4\0\21\15\4\0\6\15\21\0\1\u01cf\111\0\1\u01d0"+
    "\73\0\1\u01d1\111\0\1\u01d2\63\0\3\15\4\0\10\15"+
    "\1\u01d3\1\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\27\0\1\u01d4\72\0\1\u01d5\4\216\110\0\1\u01d6\62\0"+
    "\3\15\4\0\12\15\4\0\1\15\1\u01d7\4\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\1\u01d8\20\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\2\15\1\u01d9\16\15"+
    "\4\0\6\15\11\0\3\15\4\0\5\15\1\u01da\4\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\2\15\1\u01db\16\15"+
    "\4\0\6\15\11\0\3\15\4\0\2\15\1\u01dc\7\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\1\u01dd\11\15\4\0\1\u01de\1\u01df\4\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\1\u01e0\5\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\1\u01e1\5\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\1\u01e2\5\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\10\15"+
    "\1\u01e3\1\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\4\15\1\u01e4\1\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\6\15"+
    "\1\u01e5\3\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\32\0\1\247\50\0\32\250\1\u01e6\1\357\47\250\11\0"+
    "\3\15\4\0\1\15\1\u01e7\10\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\6\15\1\u01e8\12\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\5\15\1\u01e9\4\0\13\15"+
    "\1\u01ea\5\15\4\0\6\15\11\0\3\15\4\0\1\u01eb"+
    "\11\15\4\0\1\u01ec\1\u01ed\4\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\1\15\1\u01ee\10\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\2\15\1\u01ef\16\15\4\0"+
    "\6\15\11\0\3\15\4\0\11\15\1\u01f0\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\5\15"+
    "\1\u01f1\4\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\5\15"+
    "\1\u01f2\13\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\1\u01f3\5\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\5\15\1\u01f4\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\2\15\1\u01f5\7\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\1\u01f6\5\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\10\15\1\u01f7\1\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\11\15\1\u01f8\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\17\0\1\u01f9\114\0\1\u01cf\70\0\1\u01fa\114\0\1\u01d1"+
    "\62\0\3\15\4\0\12\15\4\0\6\15\4\0\12\15"+
    "\1\u01fb\6\15\4\0\6\15\30\0\1\u01fc\71\0\1\u01fd"+
    "\4\216\1\u011d\75\0\1\u01fe\74\0\3\15\4\0\12\15"+
    "\4\0\2\15\1\u01ff\3\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\10\15\1\u0200\1\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\2\15\1\u0201\3\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\7\15\1\u0202\2\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\10\15"+
    "\1\u0203\1\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\1\u0204\5\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\5\15\1\u0205\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\u0206\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\5\15"+
    "\1\u0207\4\0\21\15\4\0\6\15\32\250\1\u0208\50\250"+
    "\11\0\3\15\4\0\11\15\1\u0209\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\4\15\1\u020a"+
    "\5\15\4\0\6\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\10\15\1\u020b\1\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\1\u020c\20\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\16\15\1\u020d\2\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\5\15"+
    "\1\u020e\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\7\15\1\u020f\2\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\17\15\1\u0210\1\u0211\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\21\15\4\0\2\15\1\u0212"+
    "\1\u0213\2\15\11\0\3\15\4\0\1\15\1\u0214\10\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\10\15\1\u0215\1\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\12\15\1\u0216\6\15\4\0\6\15\11\0\3\15"+
    "\4\0\6\15\1\u0217\3\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\31\0\1\u0218\70\0\1\325\1\216\1\217"+
    "\2\216\1\u0219\67\0\3\15\4\0\12\15\4\0\5\15"+
    "\1\u021a\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\4\15\1\u021b\5\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\5\15\1\u021c"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\5\15\1\u021d\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\11\15\1\u021e\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\5\15"+
    "\1\u021f\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\5\15\1\u0220\13\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\2\15\1\u0221\16\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\1\u0222\20\15\4\0\6\15"+
    "\11\0\3\15\4\0\1\15\1\u0223\10\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\10\15"+
    "\1\u0224\1\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\5\15\1\u0225\4\0"+
    "\21\15\4\0\6\15\11\0\3\15\4\0\11\15\1\u0226"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\5\15\1\u0227\4\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\1\u0228\11\15\4\0"+
    "\1\u0229\1\u022a\4\15\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\1\u022b\11\15\4\0\1\u022c\1\u022d\4\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\1\u022e\20\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\12\15\1\u022f"+
    "\6\15\4\0\6\15\17\0\1\216\110\0\1\u0230\66\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\u0231\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\10\15\1\u0232\1\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\11\0\3\15"+
    "\4\0\12\15\4\0\6\15\4\0\1\u0233\20\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\5\15\1\u0234"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\5\15\1\u0235\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\u0236\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\3\15\1\u0237\15\15\4\0\6\15\11\0\3\15"+
    "\4\0\4\15\1\u0238\5\15\4\0\6\15\4\0\21\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\2\15\1\u0239\16\15\4\0\6\15\26\0\1\u023a"+
    "\65\0\3\15\4\0\12\15\4\0\6\15\4\0\2\15"+
    "\1\u023b\16\15\4\0\6\15\11\0\3\15\4\0\4\15"+
    "\1\u023c\5\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\6\15\4\0\2\15"+
    "\1\u023d\16\15\4\0\6\15\11\0\3\15\4\0\5\15"+
    "\1\u023e\4\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\12\15\4\0\4\15\1\u023f\1\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\2\15\1\u0240\3\15\4\0\21\15\4\0\6\15"+
    "\27\0\1\u0241\64\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\1\u0242\20\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\6\15\4\0\1\u0243\20\15\4\0\6\15"+
    "\11\0\3\15\4\0\6\15\1\u0244\3\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\6\15\4\0\1\u0245\20\15\4\0\6\15\11\0"+
    "\3\15\4\0\4\15\1\u0246\5\15\4\0\6\15\4\0"+
    "\21\15\4\0\6\15\30\0\1\u0247\63\0\3\15\4\0"+
    "\5\15\1\u0248\4\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\5\15\1\u0249\4\15\4\0"+
    "\6\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\10\15\1\u024a\1\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\6\15\4\0"+
    "\2\15\1\u024b\16\15\4\0\6\15\31\0\1\u024c\62\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\u024d\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\12\15\4\0\6\15"+
    "\4\0\1\u024e\20\15\4\0\6\15\11\0\3\15\4\0"+
    "\4\15\1\u024f\5\15\4\0\6\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\2\15\1\u0250"+
    "\3\15\4\0\21\15\4\0\6\15\17\0\1\u0251\74\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\2\15\1\u0252"+
    "\16\15\4\0\6\15\11\0\3\15\4\0\12\15\4\0"+
    "\6\15\4\0\2\15\1\u0253\16\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\6\15\4\0\1\u0254\20\15"+
    "\4\0\6\15\11\0\3\15\4\0\4\15\1\u0255\5\15"+
    "\4\0\6\15\4\0\21\15\4\0\6\15\17\0\1\u01fd"+
    "\4\216\70\0\3\15\4\0\12\15\4\0\2\15\1\u0256"+
    "\3\15\4\0\21\15\4\0\6\15\11\0\3\15\4\0"+
    "\12\15\4\0\2\15\1\u0257\3\15\4\0\21\15\4\0"+
    "\6\15\11\0\3\15\4\0\12\15\4\0\5\15\1\u0258"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\4\15"+
    "\1\u0259\5\15\4\0\6\15\4\0\21\15\4\0\6\15"+
    "\11\0\3\15\4\0\4\15\1\u025a\5\15\4\0\6\15"+
    "\4\0\21\15\4\0\6\15\11\0\3\15\4\0\12\15"+
    "\4\0\5\15\1\u025b\4\0\21\15\4\0\6\15\11\0"+
    "\3\15\4\0\12\15\4\0\5\15\1\u025c\4\0\21\15"+
    "\4\0\6\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32629];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\1\11\27\1\4\11\6\1\4\11"+
    "\14\1\1\11\5\1\1\11\1\0\1\1\1\0\1\11"+
    "\3\0\27\1\1\0\1\1\1\0\1\11\33\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\1\3\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\26\1\1\11\1\0\41\1"+
    "\3\0\1\1\3\0\1\11\2\1\1\11\2\1\1\0"+
    "\26\1\2\0\46\1\6\0\1\1\1\0\1\1\1\0"+
    "\27\1\2\0\41\1\5\0\1\1\1\0\1\1\1\0"+
    "\24\1\1\0\35\1\4\0\1\1\1\0\1\1\1\0"+
    "\62\1\4\0\1\1\1\0\1\1\1\0\45\1\1\0"+
    "\33\1\2\0\26\1\1\0\11\1\1\0\6\1\1\0"+
    "\5\1\1\0\4\1\1\0\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[604];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public USDHighlighterLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public USDHighlighterLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 130: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 131: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 132: break;
          case 4: 
            { return PERIOD;
            } 
            // fall through
          case 133: break;
          case 5: 
            { return ALPHA;
            } 
            // fall through
          case 134: break;
          case 6: 
            { return USDDECLARATION;
            } 
            // fall through
          case 135: break;
          case 7: 
            { return COLON;
            } 
            // fall through
          case 136: break;
          case 8: 
            { return LEFTBRACE;
            } 
            // fall through
          case 137: break;
          case 9: 
            { return RIGHTPARENS;
            } 
            // fall through
          case 138: break;
          case 10: 
            { return RIGHTBRACE;
            } 
            // fall through
          case 139: break;
          case 11: 
            { yybegin(METADATA);
                              return LEFTPARENS;
            } 
            // fall through
          case 140: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 141: break;
          case 13: 
            { return EQUALS;
            } 
            // fall through
          case 142: break;
          case 14: 
            { return LEFTBRACKET;
            } 
            // fall through
          case 143: break;
          case 15: 
            { return RIGHTBRACKET;
            } 
            // fall through
          case 144: break;
          case 16: 
            { yybegin(YYINITIAL);
                              return LEFTBRACE;
            } 
            // fall through
          case 145: break;
          case 17: 
            { yybegin(YYINITIAL);
                              return RIGHTPARENS;
            } 
            // fall through
          case 146: break;
          case 18: 
            { return STRING;
            } 
            // fall through
          case 147: break;
          case 19: 
            { return COMMENT;
            } 
            // fall through
          case 148: break;
          case 20: 
            { return BLOCKCOMMENT;
            } 
            // fall through
          case 149: break;
          case 21: 
            { return NAMESPACED_IDENTIFIER;
            } 
            // fall through
          case 150: break;
          case 22: 
            { return ASSETREFERENCE;
            } 
            // fall through
          case 151: break;
          case 23: 
            { return PATHREFERENCE;
            } 
            // fall through
          case 152: break;
          case 24: 
            { return PRIM_NAME;
            } 
            // fall through
          case 153: break;
          case 25: 
            { return FLOATNUMBER;
            } 
            // fall through
          case 154: break;
          case 26: 
            { return ADD;
            } 
            // fall through
          case 155: break;
          case 27: 
            { return REL;
            } 
            // fall through
          case 156: break;
          case 28: 
            { yybegin(SPECIFIER);
                                 return DEF;
            } 
            // fall through
          case 157: break;
          case 29: 
            { return DOC;
            } 
            // fall through
          case 158: break;
          case 30: 
            { return INTTYPE;
            } 
            // fall through
          case 159: break;
          case 31: 
            { return HALFTYPE;
            } 
            // fall through
          case 160: break;
          case 32: 
            { return UINTTYPE;
            } 
            // fall through
          case 161: break;
          case 33: 
            { return BOOLTYPE;
            } 
            // fall through
          case 162: break;
          case 34: 
            { yybegin(SPECIFIER);
                                 return OVER;
            } 
            // fall through
          case 163: break;
          case 35: 
            { return TRUE;
            } 
            // fall through
          case 164: break;
          case 36: 
            { return INT4TYPE;
            } 
            // fall through
          case 165: break;
          case 37: 
            { return INT2TYPE;
            } 
            // fall through
          case 166: break;
          case 38: 
            { return INT3TYPE;
            } 
            // fall through
          case 167: break;
          case 39: 
            { return KIND;
            } 
            // fall through
          case 168: break;
          case 40: 
            { return NONE;
            } 
            // fall through
          case 169: break;
          case 41: 
            { return HALF4TYPE;
            } 
            // fall through
          case 170: break;
          case 42: 
            { return HALF2TYPE;
            } 
            // fall through
          case 171: break;
          case 43: 
            { return HALF3TYPE;
            } 
            // fall through
          case 172: break;
          case 44: 
            { return ASSETTYPE;
            } 
            // fall through
          case 173: break;
          case 45: 
            { return UCHARTYPE;
            } 
            // fall through
          case 174: break;
          case 46: 
            { return FALSE;
            } 
            // fall through
          case 175: break;
          case 47: 
            { return FLOATTYPE;
            } 
            // fall through
          case 176: break;
          case 48: 
            { yybegin(SPECIFIER);
                                 return CLASS;
            } 
            // fall through
          case 177: break;
          case 49: 
            { return TOKENTYPE;
            } 
            // fall through
          case 178: break;
          case 50: 
            { return INT64TYPE;
            } 
            // fall through
          case 179: break;
          case 51: 
            { return QUATHTYPE;
            } 
            // fall through
          case 180: break;
          case 52: 
            { return QUATDTYPE;
            } 
            // fall through
          case 181: break;
          case 53: 
            { return QUATFTYPE;
            } 
            // fall through
          case 182: break;
          case 54: 
            { return APPEND;
            } 
            // fall through
          case 183: break;
          case 55: 
            { return UINT64TYPE;
            } 
            // fall through
          case 184: break;
          case 56: 
            { return MAPPER;
            } 
            // fall through
          case 185: break;
          case 57: 
            { return DELETE;
            } 
            // fall through
          case 186: break;
          case 58: 
            { return DOUBLETYPE;
            } 
            // fall through
          case 187: break;
          case 59: 
            { return FLOAT4TYPE;
            } 
            // fall through
          case 188: break;
          case 60: 
            { return FLOAT2TYPE;
            } 
            // fall through
          case 189: break;
          case 61: 
            { return FLOAT3TYPE;
            } 
            // fall through
          case 190: break;
          case 62: 
            { return OFFSET;
            } 
            // fall through
          case 191: break;
          case 63: 
            { return CUSTOM;
            } 
            // fall through
          case 192: break;
          case 64: 
            { return CONFIG;
            } 
            // fall through
          case 193: break;
          case 65: 
            { return STRINGTYPE;
            } 
            // fall through
          case 194: break;
          case 66: 
            { return PAYLOAD;
            } 
            // fall through
          case 195: break;
          case 67: 
            { return PREPEND;
            } 
            // fall through
          case 196: break;
          case 68: 
            { return POINT3HTYPE;
            } 
            // fall through
          case 197: break;
          case 69: 
            { return POINT3DTYPE;
            } 
            // fall through
          case 198: break;
          case 70: 
            { return POINT3FTYPE;
            } 
            // fall through
          case 199: break;
          case 71: 
            { return UNIFORM;
            } 
            // fall through
          case 200: break;
          case 72: 
            { return REORDER;
            } 
            // fall through
          case 201: break;
          case 73: 
            { return DEFAULT;
            } 
            // fall through
          case 202: break;
          case 74: 
            { return DOUBLE4TYPE;
            } 
            // fall through
          case 203: break;
          case 75: 
            { return DOUBLE2TYPE;
            } 
            // fall through
          case 204: break;
          case 76: 
            { return DOUBLE3TYPE;
            } 
            // fall through
          case 205: break;
          case 77: 
            { return FRAME4DTYPE;
            } 
            // fall through
          case 206: break;
          case 78: 
            { return VARYING;
            } 
            // fall through
          case 207: break;
          case 79: 
            { return COLOR4HTYPE;
            } 
            // fall through
          case 208: break;
          case 80: 
            { return COLOR4DTYPE;
            } 
            // fall through
          case 209: break;
          case 81: 
            { return COLOR4FTYPE;
            } 
            // fall through
          case 210: break;
          case 82: 
            { return COLOR3HTYPE;
            } 
            // fall through
          case 211: break;
          case 83: 
            { return COLOR3DTYPE;
            } 
            // fall through
          case 212: break;
          case 84: 
            { return COLOR3FTYPE;
            } 
            // fall through
          case 213: break;
          case 85: 
            { return CONNECT;
            } 
            // fall through
          case 214: break;
          case 86: 
            { return IDENTIFIER;
            } 
            // fall through
          case 215: break;
          case 87: 
            { return NORMAL3HTYPE;
            } 
            // fall through
          case 216: break;
          case 88: 
            { return NORMAL3DTYPE;
            } 
            // fall through
          case 217: break;
          case 89: 
            { return NORMAL3FTYPE;
            } 
            // fall through
          case 218: break;
          case 90: 
            { return MATRIX4DTYPE;
            } 
            // fall through
          case 219: break;
          case 91: 
            { return MATRIX2DTYPE;
            } 
            // fall through
          case 220: break;
          case 92: 
            { return MATRIX3DTYPE;
            } 
            // fall through
          case 221: break;
          case 93: 
            { return VARIANTS;
            } 
            // fall through
          case 222: break;
          case 94: 
            { return VECTOR3HTYPE;
            } 
            // fall through
          case 223: break;
          case 95: 
            { return VECTOR3DTYPE;
            } 
            // fall through
          case 224: break;
          case 96: 
            { return VECTOR3FTYPE;
            } 
            // fall through
          case 225: break;
          case 97: 
            { return INHERITS;
            } 
            // fall through
          case 226: break;
          case 98: 
            { return TYPENAME;
            } 
            // fall through
          case 227: break;
          case 99: 
            { return METADATA_KEY;
            } 
            // fall through
          case 228: break;
          case 100: 
            { return EDGEINDEXTYPE;
            } 
            // fall through
          case 229: break;
          case 101: 
            { return ASSETINFO;
            } 
            // fall through
          case 230: break;
          case 102: 
            { return RELOCATES;
            } 
            // fall through
          case 231: break;
          case 103: 
            { return ROOTPRIMS;
            } 
            // fall through
          case 232: break;
          case 104: 
            { return SUBLAYERS;
            } 
            // fall through
          case 233: break;
          case 105: 
            { return FACEINDEXTYPE;
            } 
            // fall through
          case 234: break;
          case 106: 
            { return TRANSFORMTYPE;
            } 
            // fall through
          case 235: break;
          case 107: 
            { return ATTRIBUTES;
            } 
            // fall through
          case 236: break;
          case 108: 
            { return PERMISSION;
            } 
            // fall through
          case 237: break;
          case 109: 
            { return PROPERTIES;
            } 
            // fall through
          case 238: break;
          case 110: 
            { return REFERENCES;
            } 
            // fall through
          case 239: break;
          case 111: 
            { return DICTIONARY;
            } 
            // fall through
          case 240: break;
          case 112: 
            { return VARIANTSET;
            } 
            // fall through
          case 241: break;
          case 113: 
            { return CUSTOMDATA;
            } 
            // fall through
          case 242: break;
          case 114: 
            { return TEXCOORD2HTYPE;
            } 
            // fall through
          case 243: break;
          case 115: 
            { return TEXCOORD2DTYPE;
            } 
            // fall through
          case 244: break;
          case 116: 
            { return TEXCOORD2FTYPE;
            } 
            // fall through
          case 245: break;
          case 117: 
            { return TEXCOORD3HTYPE;
            } 
            // fall through
          case 246: break;
          case 118: 
            { return TEXCOORD3DTYPE;
            } 
            // fall through
          case 247: break;
          case 119: 
            { return TEXCOORD3FTYPE;
            } 
            // fall through
          case 248: break;
          case 120: 
            { return POINTINDEXTYPE;
            } 
            // fall through
          case 249: break;
          case 121: 
            { return DISPLAYUNIT;
            } 
            // fall through
          case 250: break;
          case 122: 
            { return VARIANTSETS;
            } 
            // fall through
          case 251: break;
          case 123: 
            { return SPECIALIZES;
            } 
            // fall through
          case 252: break;
          case 124: 
            { return NAMECHILDREN;
            } 
            // fall through
          case 253: break;
          case 125: 
            { return INTERPOLATION;
            } 
            // fall through
          case 254: break;
          case 126: 
            { return SYMMETRYFUNCTION;
            } 
            // fall through
          case 255: break;
          case 127: 
            { return SYMMETRYARGUMENTS;
            } 
            // fall through
          case 256: break;
          case 128: 
            { return PREFIXSUBSTITUTIONS;
            } 
            // fall through
          case 257: break;
          case 129: 
            { return SUFFIXSUBSTITUTIONS;
            } 
            // fall through
          case 258: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
